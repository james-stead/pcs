# Compatibility with GNU/Linux [i.e. Debian] based distros
UNAME_OS_GNU := $(shell if uname -o | grep -q "GNU/Linux" ; then echo true; else echo false; fi)
DISTRO_DEBIAN := $(shell if [ -e /etc/debian_version ] ; then echo true; else echo false; fi)
IS_DEBIAN=false

ifeq ($(UNAME_OS_GNU),true)
  ifeq ($(DISTRO_DEBIAN),true)
    IS_DEBIAN=true
  endif
endif

ifeq ($(IS_DEBIAN),true)
  EXTRA_SETUP_OPTS="--install-layout=deb"
endif

# VARIABLES OVERRIDABLE FROM OUTSIDE
# ==================================

# Check for an override for building gems
ifndef BUILD_GEMS
  BUILD_GEMS=true
endif

ifndef INIT_DIR
  INIT_DIR=/etc/init.d
endif

ifndef BASH_COMPLETION_DIR
  BASH_COMPLETION_DIR=/etc/bash_completion.d
endif

# INSTALLATION FINE DETAIL CONTROLL
# =================================
#  `BUNDLE_TORNADO_SRC_DIR=/path/to/tornado/sources`
#      to install tornado from specified location (tornado is not installed by
#      default)
#  `BUNDLE_DATACLASSES_SRC_DIR=/path/to/dataclasses/sources`
#      to install dataclasses from specified location (dataclasses are not
#      installed by default)
#  `BUNDLE_DACITE_SRC_DIR=/path/to/dacite/sources`
#      to install dacite from specified location (dacite is not installed by
#      default)
#  `BUNDLE_DATEUTIL_SRC_DIR=/path/to/python-dateutil/sources`
#      to install python-dateutil from specified location (python-dateutil is
#      not installed by default)

# There is BUNDLE_TO_INSTALL when BUNDLE_INSTALL_PYAGENTX is true or any of
# BUNDLE_TORNADO_SRC_DIR, BUNDLE_DATACLASSES_SRC_DIR, BUNDLE_DACITE_SRC_DIR or
# BUNDLE_DATEUTIL_SRC_DIR is specified
BUNDLE_TO_INSTALL=false
ifneq ($(and $(BUNDLE_TORNADO_SRC_DIR),$(BUNDLE_DATACLASSES_SRC_DIR),$(BUNDLE_DACITE_SRC_DIR),$(BUNDLE_DATEUTIL_SRC_DIR)),)
	BUNDLE_TO_INSTALL=true
endif

# DESTINATION DIRS
# ================

DEST_PYTHON_SITELIB = ${DESTDIR}${PYTHON_SITELIB}
DEST_PYTHON_SCRIPT_DIR=${DESTDIR}$(shell $(PYTHON) setup.py scriptdir | tail --lines=1)
DEST_MAN=${DESTDIR}/usr/share/man/man8
DEST_SYSTEMD_SYSTEM = ${DESTDIR}${SYSTEMD_UNIT_DIR}
DEST_INIT = ${DESTDIR}${INIT_DIR}
DEST_BASH_COMPLETION = ${DESTDIR}${BASH_COMPLETION_DIR}
DEST_CONF = ${DESTDIR}${CONF_DIR}
DEST_LIB = ${DESTDIR}${LIB_DIR}
DEST_PREFIX = ${DESTDIR}${PREFIX}
DEST_BUNDLE_LIB=${DEST_LIB}/pcs/bundled
DEST_BUNDLE_LOCAL=$(shell readlink -f ${BUNDLE_LOCAL_DIR})
DEST_SNMP_MIB=${DEST_PREFIX}${SNMP_MIB_DIR}

# OTHER
# =====

pcsd_fonts = \
	LiberationSans-Regular.ttf;LiberationSans:style=Regular \
	LiberationSans-Bold.ttf;LiberationSans:style=Bold \
	LiberationSans-BoldItalic.ttf;LiberationSans:style=BoldItalic \
	LiberationSans-Italic.ttf;LiberationSans:style=Italic \
	Overpass-Regular.ttf;Overpass:style=Regular \
	Overpass-Bold.ttf;Overpass:style=Bold

# 1 - an alternative file
# 2 - a file which will be replaced by the alternative file
define use-alternative-file
	rm -f  $(2)
	install -m644 $(1) $(2)
endef

# TARGETS
# =======

install_bundled_libs:
ifeq ($(BUNDLE_TO_INSTALL),true)
	install -d ${DEST_BUNDLE_LIB}
endif
ifdef BUNDLE_TORNADO_SRC_DIR
	$(call build_python_bundle,${BUNDLE_TORNADO_SRC_DIR},${DEST_BUNDLE_LIB})
endif
ifdef BUNDLE_DATACLASSES_SRC_DIR
	$(call build_python_bundle,${BUNDLE_DATACLASSES_SRC_DIR},${DEST_BUNDLE_LIB})
endif
ifdef BUNDLE_DACITE_SRC_DIR
	$(call build_python_bundle,${BUNDLE_DACITE_SRC_DIR},${DEST_BUNDLE_LIB})
endif
ifdef BUNDLE_DATEUTIL_SRC_DIR
	$(call build_python_bundle,${BUNDLE_DATEUTIL_SRC_DIR},${DEST_BUNDLE_LIB})
endif

install_python_part: install_bundled_libs
	# make Python interpreter execution sane (via -Es flags)
	printf "[build]\nexecutable = $(PYTHON) -Es\n" > setup.cfg
	$(PYTHON) setup.py install --root=$(or ${DESTDIR}, /) ${EXTRA_SETUP_OPTS}
	# fix excessive script interpreting "executable" quoting with old setuptools:
	# https://github.com/pypa/setuptools/issues/188
	# https://bugzilla.redhat.com/1353934
	sed -i '1s|^\(#!\)"\(.*\)"$$|\1\2|' ${DEST_PYTHON_SCRIPT_DIR}/pcs
	sed -i '1s|^\(#!\)"\(.*\)"$$|\1\2|' ${DEST_PYTHON_SCRIPT_DIR}/pcs_snmp_agent
	sed -i '1s|^\(#!\)"\(.*\)"$$|\1\2|' ${DEST_PYTHON_SCRIPT_DIR}/pcs_internal
	rm setup.cfg
	mkdir -p ${DEST_PREFIX}/sbin/
	mv ${DEST_PYTHON_SCRIPT_DIR}/pcs ${DEST_PREFIX}/sbin/pcs
	mv ${DEST_PYTHON_SCRIPT_DIR}/pcsd ${DEST_PREFIX}/sbin/pcsd
	install -D -m644 pcs/bash_completion ${DEST_BASH_COMPLETION}/pcs
	install -m644 -D pcs/pcs.8 ${DEST_MAN}/pcs.8
	# pcs_internal
	mkdir -p ${DEST_LIB}/pcs/
	mv ${DEST_PYTHON_SCRIPT_DIR}/pcs_internal ${DEST_LIB}/pcs/pcs_internal
	# pcs SNMP install
	mv ${DEST_PYTHON_SCRIPT_DIR}/pcs_snmp_agent ${DEST_LIB}/pcs/pcs_snmp_agent
	install -d ${DEST_SNMP_MIB}
	install -m 644 pcs/snmp/mibs/PCMK-PCS*-MIB.txt ${DEST_SNMP_MIB}
	install -m 644 -D pcs/snmp/pcs_snmp_agent.conf ${DEST_CONF}/pcs_snmp_agent
	install -m 644 -D pcs/snmp/pcs_snmp_agent.8 ${DEST_MAN}/pcs_snmp_agent.8
ifeq ($(IS_DEBIAN),true)
	$(call use-alternative-file,pcs/settings.py.debian,${DEST_PYTHON_SITELIB}/pcs/settings.py)
endif
	$(PYTHON) -m compileall -fl ${DEST_PYTHON_SITELIB}/pcs/settings.py
ifeq ($(IS_SYSTEMCTL),true)
	install -d ${DEST_SYSTEMD_SYSTEM}
	install -m 644 pcs/snmp/pcs_snmp_agent.service ${DEST_SYSTEMD_SYSTEM}
endif

install: install_python_part
ifeq ($(BUILD_GEMS),true)
	make -C pcsd build_gems
endif
	install -d -m 700 ${DESTDIR}/var/log/pcsd
	mkdir -p ${DEST_LIB}/pcsd/
	cp -r pcsd ${DEST_LIB}
	install -m 644 -D pcsd/pcsd.conf ${DEST_CONF}/pcsd
	install -d ${DESTDIR}/etc/pam.d
	install -m 644 pcsd/pcsd.pam ${DESTDIR}/etc/pam.d/pcsd
ifeq ($(IS_DEBIAN),true)
	$(call use-alternative-file,pcsd/settings.rb.debian,${DEST_LIB}/pcsd/settings.rb)
endif
ifeq ($(IS_DEBIAN)$(IS_SYSTEMCTL),truefalse)
	install -m 755 -D pcsd/pcsd.debian ${DEST_INIT}/pcsd
else
	install -d ${DEST_SYSTEMD_SYSTEM}
	install -m 644 ${SYSTEMD_SERVICE_FILE} ${DEST_SYSTEMD_SYSTEM}/pcsd.service
	install -m 644 pcsd/pcsd-ruby.service ${DEST_SYSTEMD_SYSTEM}/pcsd-ruby.service
endif
	# ${DEST_LIB}/pcsd/pcsd holds the selinux context
	install -m 755 pcsd/pcsd.service-runner ${DEST_LIB}/pcsd/pcsd
	rm ${DEST_LIB}/pcsd/pcsd.service-runner
	
	install -m 700 -d ${DESTDIR}/var/lib/pcsd
	install -m 644 -D pcsd/pcsd.logrotate ${DESTDIR}/etc/logrotate.d/pcsd
	install -m644 -D pcsd/pcsd.8 ${DEST_MAN}/pcsd.8
	$(foreach font,$(pcsd_fonts),\
		$(eval font_file = $(word 1,$(subst ;, ,$(font)))) \
		$(eval font_def = $(word 2,$(subst ;, ,$(font)))) \
		$(eval font_path = $(shell fc-match '--format=%{file}' '$(font_def)')) \
		$(if $(font_path),ln -s -f $(font_path) ${DEST_LIB}/pcsd/public/css/$(font_file);,$(error Font $(font_def) not found)) \
	)

# CODE QUALITY
# ===========

BUNDLE_CONGIG_FILE := $(RPM_BUILD_DIR)/pcsd-bundle-config

$(BUNDLE_CONGIG_FILE): $(RPM_BUILD_DIR)
	rm -f $@
	echo '---' >> $@
	echo 'BUNDLE_FROZEN: "true"' >> $@
	echo 'BUNDLE_PATH: "vendor/bundle"' >> $@
	echo 'BUNDLE_DISABLE_SHARED_GEMS: "true"' >> $@
	echo "BUNDLE_BUILD: \"--with-ldflags='-Wl,-z,now -Wl,-z,relro'\"" >> $@

sources: dist $(SPEC) $(RPM_BUILD_DIR)
	cd $(RPM_BUILD_DIR) && \
	cp ../$(DIST_ARCHIVE_NAME) $(DIST_ARCHIVE_NAME) && \
	cp ../$(SPEC) $(SPEC) && \
	spectool -S $(SPEC) | sed -En "s/^[^ ]+ (.*)$$/\1/p" | grep "^http.*" | xargs -n 1 curl -OL
	$(MAKE) $(BUNDLE_CONGIG_FILE)
